const sqlite3 = require("sqlite3").verbose();
const TelegramBot = require("node-telegram-bot-api");
const { BOT_TOKEN, TARGET_URL } = require("./utils/config");
const puppeteer = require("puppeteer");

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const TELEGRAM_BOT_TOKEN = BOT_TOKEN;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("./prices.db", (err) => {
  if (err) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message);
});
db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chatId TEXT UNIQUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );`);

db.run(`CREATE TABLE IF NOT EXISTS prices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    minPrice REAL DEFAULT 0,
    maxPrice REAL DEFAULT 0,
    currentPrice REAL DEFAULT 0,
    lastUpdated DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(userId) REFERENCES users(id)
  );`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  db.get("SELECT * FROM users WHERE chatId = ?", [chatId], (err, row) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
      return;
    }

    if (row) {
      bot.sendMessage(
        chatId,
        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
      );
    } else {
      db.run("INSERT INTO users (chatId) VALUES (?)", [chatId], (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
          return;
        }

        bot.sendMessage(
          chatId,
          "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—á–Ω—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        );
      });
    }
  });
});

async function scrapePricesWithRetry(url = TARGET_URL, maxRetries = 5, initialDelay = 1000) {
  const DEFAULT_VALUES = { minPrice: null, maxPrice: null, currentPrice: null };

  let browser;
  let attempt = 0;
  let delay = initialDelay;

  const selectors = {
    minPrice: 'div.position_range_left_cont .position_range_column_wrap h1.position_range_text span',
    currentPrice: 'div.position_range_middle_cont .position_range_column_wrap h1.position_range_text:nth-of-type(2) span',
    maxPrice: 'div.position_range_right_cont .position_range_column_wrap h1.position_range_text span',
  };

  try {
    browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();

    // –ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç –æ–¥–∏–Ω —Ä–∞–∑
    await page.goto(url);

    while (attempt < maxRetries) {
      try {
        for (const selector of Object.values(selectors)) {
          await page.waitForSelector(selector, { timeout: 5000 });
        }

        const prices = await page.evaluate((selectors) => {
          const extractText = (selector) => {
            const element = document.querySelector(selector);
            return element ? element.textContent.trim() : null;
          };

          return {
            minPrice: extractText(selectors.minPrice),
            currentPrice: extractText(selectors.currentPrice),
            maxPrice: extractText(selectors.maxPrice),
          };
        }, selectors);

        // –°–∞–Ω–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const sanitizedPrices = {
          minPrice: prices.minPrice,
          currentPrice: prices.currentPrice,
          maxPrice: prices.maxPrice,
        };

        if (
          sanitizedPrices.minPrice === "Infinity" ||
          sanitizedPrices.maxPrice === "Infinity" ||
          sanitizedPrices.currentPrice === "NaN"
        ) {
          throw new Error("Not valid data");
        }

        return sanitizedPrices;

      } catch (error) {
        attempt++;
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
        if (attempt < maxRetries) {
          console.log(`–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay} –º—Å...`);
          await new Promise((resolve) => setTimeout(resolve, delay));
          delay *= 2;
        } else {
          console.error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π.');
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–µ:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
  return new Promise((resolve) => {
    db.get(
      "SELECT minPrice, maxPrice, currentPrice FROM prices ORDER BY lastUpdated DESC LIMIT 1",
      (err, row) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã:", err.message);
          resolve(DEFAULT_VALUES);
        } else if (row) {
          resolve(row);
        } else {
          resolve(DEFAULT_VALUES);
        }
      }
    );
  });
}

bot.onText(/\/info/, async (msg) => {
  const chatId = msg.chat.id;
  const newPrices = await scrapePricesWithRetry();

  bot.sendMessage(
    chatId,
    `–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: \nminPrice: ${newPrices.minPrice}, \nmaxPrice: ${newPrices.maxPrice}, \ncurrentPrice: ${newPrices.currentPrice}`
  );
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function checkAndUpdatePricesForUser(userId, chatId, newPrices) {
  db.get(
    "SELECT minPrice, maxPrice, currentPrice FROM prices WHERE userId = ? ORDER BY id DESC LIMIT 1",
    [userId],
    (err, row) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", err.message);
        return;
      }

      console.log("Row", row, "newPrice", newPrices);

      const dataChanged =
        !row ||
        Number(row.minPrice) !== Number(newPrices.minPrice) ||
        Number(row.maxPrice) !== Number(newPrices.maxPrice);

      if (dataChanged) {
        db.run(
          "INSERT INTO prices (userId, minPrice, maxPrice, currentPrice) VALUES (?, ?, ?, ?)",
          [
            userId,
            newPrices.minPrice,
            newPrices.maxPrice,
            newPrices.currentPrice,
          ],
          (err) => {
            if (err) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", err.message);
            }
          }
        );

        bot.sendMessage(
          chatId,
          `üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: üîÑ\nminPrice: ${newPrices.minPrice}, \nmaxPrice: ${newPrices.maxPrice}, \n\n currentPrice: ${newPrices.currentPrice}`
        );
      } else {
        console.log("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å");
      }
    }
  );
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function processUsers() {
  db.all("SELECT * FROM users", async (err, users) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err.message);
      return;
    }

    for (const user of users) {
      const prices = await scrapePricesWithRetry();
      if (prices) {
        checkAndUpdatePricesForUser(user.id, user.chatId, prices);
      }
    }
  });
}


setInterval(processUsers, 60000);
processUsers();


